from .config import CRYPTO_PADDING
from .config import DECODINGMETHOD
from .config import DRBG
import hashlib
from .objects_def import RlcePrivateKey
from .objects_def import RlcePublicKey
from .objects_def import DrbgInput
import numpy as np
import random
from .drgb import drbgstate_init, hash_drbg
from .byte_functions_lib import random_bytes_2_fe
from .byte_functions_lib import get_permutation
from .byte_functions_lib import permutation_inv
from pyfinite import ffield
from .galois_field import GF_vecinverse
from .galois_field import getMatrixAandAinv
from .field_poly import Poly
from .config import OPTIMIZED
from .galois_field import GF_rsgenerator2optG
from .galois_field import matrix_opt_mul_A
from .galois_field import matrix_echelon


para = {
    'n': 0,
    'k': 0,
    'w': 0,
    'GF_size': 0,
    'hash_type': 0,
    'm_len': 0,  # for medium encoding
    'k1': 0,  # for medium encoding
    'k2': 0,  # for medium encoding
    'k3': 0,  # for medium encoding
    'padding': 0,
    'scheme': 0,
    't': 0,
    'omega': 0,  # for list decoding
    'l_omega': 0,  # for list decoding
    'kappa': 0,
    'u': 0,  # for un-recovered msg symbols by RS
    'cphr_len': 0,  # cipher len in bytes
    'sk_bytes': 0,  # sk bytes for decodingalgorithm 0,1
    'pk_bytes': 0,
    'rand_in_bytes': 0
}
LISTDECODE = 0

# private
def rlce_private_key_init():
    global para
    key = RlcePrivateKey(para=para, perm1=np.zeros(para['n']),
                         perm2=np.zeros(para['n'] + para['w']),
                         A=np.zeros((para['w'], 2, 2)),
                         grs=np.zeros(para['n']),
                         G=np.zeros((para['k'], para['n'] + para['w'] - para['k'])))
    return key


# private
def rlce_public_key_init():
    global para
    key = RlcePublicKey(para=para, G=np.zeros((para['k'], para['n'] + para['w'] - para['k'])))
    return key


# private
def get_random_bytes_from_command_line(num):
    if num > 64:
        return None
    s = 'Please type at least ' + str(num) + ' characters and then press ENTER\n'
    # mes = input(s)
    mes = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
    hash_object = hashlib.sha512()
    hash_object.update(mes.encode(encoding='utf-8'))
    return hash_object.hexdigest()[0:num]


# public
def rlce_keypair(scheme, filename):
    global para
    ret = get_rlce_parameters(scheme, CRYPTO_PADDING)
    if ret is None:
        return None
    randomness = get_random_bytes_from_command_line(para['rand_in_bytes'])
    if randomness is None:
        return None
    randomness = randomness.split()[0]

    sk = rlce_private_key_init()
    pk = rlce_public_key_init()

    nonce = random.getrandbits(128)

    pk, sk = rlce_key_setup(randomness, nonce, 16, pk, sk)
    print(sk)
    with open("private_key.txt", "w") as file:
        file.write(str(sk.G))
    with open("public_key.txt", "w") as file:
        file.write(str(pk.G))
    return 0


# private
def get_rlce_parameters(scheme, padding):
    global para
    para['scheme'] = scheme
    para['padding'] = padding

    if scheme == 0:
        para['n'] = 630
        para['k'] = 470
        para['w'] = 160
        para['GF_size'] = 10
        para['hash_type'] = 2
        para['t'] = 80
        para['omega'] = 0
        para['l_omega'] = 0
        para['kappa'] = 128
        para['u'] = 200
        para['cphr_len'] = 988
        if DECODINGMETHOD != 2:
            para['sk_bytes'] = 310116
        else:
            para['sk_bytes'] = 192029
        para['pk_bytes'] = 188001
        para['rand_in_bytes'] = 32

        if padding == 0:
            para['m_len'] = 5500
            para['k1'] = 171
            para['k2'] = 171
            para['k3'] = 346
        elif padding == 1:
            para['m_len'] = 5500
            para['k1'] = 624
            para['k2'] = 32
            para['k3'] = 32
        elif padding == 2:
            para['m_len'] = 4700
            para['k1'] = 146
            para['k2'] = 146
            para['k3'] = 296
        elif padding == 3:
            para['m_len'] = 4700
            para['k1'] = 524
            para['k2'] = 32
            para['k3'] = 32
        elif padding == 4:
            para['m_len'] = 5869
            para['k1'] = 183
            para['k2'] = 183
            para['k3'] = 368
        elif padding == 5:
            para['m_len'] = 5869
            para['k1'] = 670
            para['k2'] = 32
            para['k3'] = 32
        else:
            return None
    elif scheme == 1:
        para['n'] = 1000
        para['k'] = 764
        para['w'] = 236
        para['GF_size'] = 10
        para['hash_type'] = 2
        para['t'] = 118
        para['omega'] = 0
        para['l_omega'] = 0
        para['kappa'] = 192
        para['u'] = 303
        para['cphr_len'] = 1545
        if DECODINGMETHOD != 2:
            para['sk_bytes'] = 747393
        else:
            para['sk_bytes'] = 457073
        para['pk_bytes'] = 450761
        para['rand_in_bytes'] = 40

        if padding == 0:
            para['m_len'] = 8820
            para['k1'] = 275
            para['k2'] = 275
            para['k3'] = 553
        elif padding == 1:
            para['m_len'] = 8820
            para['k1'] = 1007
            para['k2'] = 48
            para['k3'] = 48
        elif padding == 2:
            para['m_len'] = 7640
            para['k1'] = 238
            para['k2'] = 238
            para['k3'] = 479
        elif padding == 3:
            para['m_len'] = 7640
            para['k1'] = 859
            para['k2'] = 48
            para['k3'] = 48
        elif padding == 4:
            para['m_len'] = 9377
            para['k1'] = 293
            para['k2'] = 293
            para['k3'] = 587
        elif padding == 5:
            para['m_len'] = 9377
            para['k1'] = 1077
            para['k2'] = 48
            para['k3'] = 48
        else:
            return None
    elif scheme == 2:
        para['n'] = 1360
        para['k'] = 800
        para['w'] = 560
        para['GF_size'] = 11
        para['hash_type'] = 2
        para['t'] = 280
        para['omega'] = 0
        para['l_omega'] = 0
        para['kappa'] = 256
        para['u'] = 482
        para['cphr_len'] = 2640
        if DECODINGMETHOD != 2:
            para['sk_bytes'] = 1773271
        else:
            para['sk_bytes'] = 1241971
        para['pk_bytes'] = 1232001
        para['rand_in_bytes'] = 48

        if padding == 0:
            para['m_len'] = 11880
            para['k1'] = 371
            para['k2'] = 371
            para['k3'] = 743
        elif padding == 1:
            para['m_len'] = 11880
            para['k1'] = 1365
            para['k2'] = 60
            para['k3'] = 60
        elif padding == 2:
            para['m_len'] = 8800
            para['k1'] = 275
            para['k2'] = 275
            para['k3'] = 550
        elif padding == 3:
            para['m_len'] = 8800
            para['k1'] = 980
            para['k2'] = 60
            para['k3'] = 60
        elif padding == 4:
            para['m_len'] = 13025
            para['k1'] = 407
            para['k2'] = 407
            para['k3'] = 815
        elif padding == 5:
            para['m_len'] = 13025
            para['k1'] = 1509
            para['k2'] = 60
            para['k3'] = 60
        else:
            return None
    else:
        return None
    return 0


def rlce_key_setup(entropy, nonce: int, noncelen: int, pk: RlcePublicKey, sk: RlcePrivateKey):
    ret = 0
    m = sk.para['GF_size']
    n = sk.para['n']
    k = sk.para['k']
    w = sk.para['w']
    t = sk.para['t']
    nplusw = n+w
    nminusw = n-w
    global LISTDECODE
    LISTDECODE = 0
    if 2*t > n - k:
        LISTDECODE = 1
    nRE = n + (4 + k) * w + 25
    nRBforRE = (m * nRE) // 8
    if (m * nRE) % 8 > 0:
        nRBforRE += 1
    nRB = nRBforRE + 4 * n + 2 * w
    print(nRBforRE)
    randomBytes = np.zeros(nRB)
    pers = "PostQuantumCryptoRLCEversion2017"
    perlen = len(pers)
    addS = "GRSbasedPostQuantumENCSchemeRLCE"
    addlen = len(addS)

    if DRBG == 0:
        noncehex = "5e7d69e187577b0433eee8eab9f77731"
        if noncelen == 0:
            nonce = int(noncehex, 16)
            noncelen = 16

        drgb_state = drbgstate_init(sk.para['hash_type'])
        drgb_input = DrbgInput(entropy, len(entropy), nonce, noncelen, pers, perlen, addS, addlen)
        randomBytes = hash_drbg(drbg_state=drgb_state, drbg_input=drgb_input, output=randomBytes)
        drgb_input = None
        drgb_state = None
        if randomBytes is None:
            return None
    elif DRBG == 1:
        # Not implemented
        None
    elif DRBG == 2:
        # Not implemented
        None
    randE = random_bytes_2_fe(randomBytes, nRBforRE, nRE, m)
    if randE is None:
        return None, None
    per1 = get_permutation(n, n-1, randomBytes[nRBforRE:])
    per1inv = permutation_inv(per1)

    sk.perm1 = np.copy(per1inv)

    ##
    done = 0
    unknown_index = np.zeros(k)
    known_index = np.zeros(k)
    per2 = None
    remdim = 0

    while done >= 0:
        error_cleared_number = 0
        index1 = 0
        index2 = 0
        per2 = get_permutation(nplusw, nplusw-1, randomBytes[(nRBforRE+2*n-2+done):])
        if per2 is None:
            return None, None
        for i in range(k):
            if per2[i] < nminusw:
                known_index[index2] = i
                index2 += 1
                error_cleared_number += 1
            else:
                unknown_index[index1] = i
                index1 += 1
        remdim = k - error_cleared_number
        if remdim <= sk.para['u']:
            per2inv = permutation_inv(per2)
            sk.perm2 = np.copy(per2inv)
            done = -1
        else:
            done += 1

    grsvec = randE.copy()
    sk.grs = GF_vecinverse(grsvec, n, m)
    A = np.zeros((w, 2, 2))
    print(randE)
    A, sk.A = getMatrixAandAinv(A, sk.A, randE[n+5:], 4*w+20, m)
    if A is None:
        print('A is none')
        return None, None
    generator = Poly(n)
    if LISTDECODE == 0:
        generator = genPolyTable(n-k)

    G = None
    G2 = None
    optG = None
    if OPTIMIZED == 1:
        if LISTDECODE == 0:
            optG = GF_rsgenerator2optG(generator, grsvec, m)
        else:
            # Not implemented
            None, None

        tmprow = optG.copy()
        for i in range(n):
            print(max(per1))
            optG[i] = tmprow[int(per1[i])]
        tmprow = np.zeros(2*w)
        for i in range(2*w):
            tmprow[i] = optG[nminusw+i]
        # raise Exception('tttttt')
        for i in range(w):
            optG[nminusw+2*i] = tmprow[i]
            optG[nminusw+2*i+1] = tmprow[w+i]
            optG[(nminusw+2*i+1)] = randE[(n+4*w+25+k*i)]
        optG = matrix_opt_mul_A(optG, A, nminusw, m)
        tmprow = optG[:nplusw]
        for i in range(nplusw):
            optG[i] = tmprow[per2[i]]
        G2 = np.zeros((k, nplusw))
        for i in range(k):
            for j in range(nplusw):
                G2[i, j] = optG[i, j]
    else:
        # Not implemented
        print('Not implemented OPTIMIZED /= 1')
        return None, None
    raise Exception('ssssss')
    if DECODINGMETHOD == 0:
        # Not implemented
        print('Not implemented DECODINGMETHOD == 0')
        return None, None
    G2 = matrix_echelon(G2, m)
    if G2 is None:
        print('G2 is None')
        return None, None

    for i in range(k):
        sk.G[i] = G2[i][k]
        pk.G[i] = G2[i][k]

    W = np.zeros((remdim, 2*remdim))
    for i in range(remdim):
        W[i][remdim+i] = 1
    workingindexbase = 0
    workingindex = 0
    error_cleared_number = 0
    listctr = 0
    test = 1
    notdone = 1
    ti = 0

    while notdone:
        workingindex = workingindexbase
        for i in range(remdim):
            test = 1
            while test:
                if sk.perm2[workingindex] < k:
                    workingindex += 1
                    if workingindex < n-w-1:
                        return None, None
                else:
                    test = 0
            sk.S[listctr][remdim] = workingindex
            listctr += 1
            ti = sk.perm2[workingindex] - k
            for j in range(remdim):
                W[j][i] = sk.G[unknown_index[j]][ti]
            for j in range(error_cleared_number):
                sk.S[remdim+j][i] = sk.G[known_index[j]][ti]
            workingindex += 1
        ret = matrix_echelon(W, m)
        if ret < 0:
            workingindexbase += 1
            listctr = 0
            for i in range(remdim):
                W[i][remdim] = 0
                W[i][remdim+i] = 1
        else:
            notdone = 0
    for i in range(remdim):
        sk.S[i] = W[i][remdim]

    unknown_index = None
    known_index = None
    G2 = None
    per1inv = None
    per1 = None
    A = None
    return pk, sk


def genPolyTable(deg):
    p = Poly(deg + 1)
    if deg == 156:
        coeff = [0x019c, 0x011b, 0x00b5, 0x004e, 0x0377, 0x020c, 0x0255, 0x0159, 0x0134, 0x0396, 0x0188, 0x020c, 0x0323,
                 0x00d6, 0x033e, 0x0344, 0x0274, 0x030b, 0x020d, 0x03a3, 0x03ec, 0x03d1, 0x02ed, 0x0272, 0x03d3, 0x007c,
                 0x01fd, 0x037c, 0x020e, 0x0133, 0x03dc, 0x00f0, 0x007b, 0x00cb, 0x02b7, 0x0052, 0x0138, 0x00e7, 0x02ca,
                 0x01ee, 0x0063, 0x03d2, 0x00e0, 0x027d, 0x0092, 0x02ca, 0x0382, 0x00d1, 0x018a, 0x00b6, 0x0257, 0x022f,
                 0x0185, 0x01a3, 0x00a0, 0x030c, 0x02f2, 0x01ae, 0x0055, 0x028a, 0x0378, 0x026b, 0x0308, 0x035e, 0x0169,
                 0x03da, 0x0358, 0x0058, 0x03c0, 0x02e9, 0x0337, 0x0093, 0x0267, 0x0351, 0x0045, 0x027d, 0x02b2, 0x013f,
                 0x024c, 0x0327, 0x0206, 0x034a, 0x0104, 0x03db, 0x025a, 0x00e2, 0x01db, 0x012e, 0x0273, 0x028d, 0x03c1,
                 0x03ae, 0x038e, 0x036a, 0x022c, 0x0096, 0x0357, 0x0188, 0x00db, 0x0297, 0x02b4, 0x01b8, 0x0270, 0x0124,
                 0x01b6, 0x0134, 0x0270, 0x017b, 0x0386, 0x02a9, 0x03fb, 0x00da, 0x0360, 0x0325, 0x014b, 0x0153, 0x01b2,
                 0x0014, 0x036b, 0x036e, 0x0064, 0x02e1, 0x001e, 0x0150, 0x00e6, 0x0089, 0x029c, 0x0088, 0x020d, 0x0194,
                 0x025a, 0x02cd, 0x02de, 0x02f2, 0x0369, 0x0078, 0x0205, 0x030e, 0x0166, 0x0260, 0x00dd, 0x036d, 0x02c2,
                 0x0221, 0x03a9, 0x0112, 0x016b, 0x0058, 0x0204, 0x01e2, 0x02e0, 0x030c, 0x024e, 0x009e, 0x03e4, 0x03e1,
                 0x0001]
        p.coeff = coeff.copy()
        p.deg = deg

    if deg == 160:
        coeff = [0x03d5, 0x03a1, 0x01de, 0x0268, 0x03e1, 0x0009, 0x0140, 0x0012, 0x0181, 0x037d, 0x01f4, 0x01de, 0x013b,
                 0x02f3, 0x0060, 0x0076, 0x02d1, 0x0100, 0x0135, 0x0108, 0x00d8, 0x0077, 0x01c5, 0x023a, 0x02bb, 0x029f,
                 0x0270, 0x0384, 0x0367, 0x03c9, 0x0352, 0x0288, 0x01b4, 0x0060, 0x030c, 0x00ab, 0x015b, 0x00f9, 0x0035,
                 0x028b, 0x033d, 0x0191, 0x00a3, 0x0276, 0x02d9, 0x03d6, 0x031f, 0x039b, 0x0209, 0x0061, 0x0113, 0x01a8,
                 0x0244, 0x006f, 0x01f6, 0x025c, 0x03ff, 0x0267, 0x02d2, 0x028a, 0x0160, 0x00b9, 0x0265, 0x013e, 0x0110,
                 0x036a, 0x01d4, 0x0032, 0x022a, 0x0383, 0x0066, 0x025f, 0x01e1, 0x0153, 0x0185, 0x0198, 0x0175, 0x0096,
                 0x0238, 0x02d2, 0x00c4, 0x01f8, 0x026f, 0x0115, 0x019b, 0x034f, 0x00f8, 0x01b5, 0x03a2, 0x00a8, 0x006b,
                 0x0255, 0x0138, 0x035f, 0x0165, 0x01cf, 0x02a2, 0x02f4, 0x02d8, 0x0178, 0x00fa, 0x0287, 0x02c8, 0x03bb,
                 0x0005, 0x00c4, 0x03c2, 0x0347, 0x03ee, 0x0263, 0x0243, 0x032c, 0x0282, 0x0379, 0x0194, 0x0038, 0x0394,
                 0x02f3, 0x0039, 0x0157, 0x013f, 0x0032, 0x00c2, 0x020d, 0x03ed, 0x0371, 0x02fa, 0x0170, 0x0184, 0x010a,
                 0x0245, 0x03a1, 0x01f9, 0x0180, 0x00fb, 0x0086, 0x01bf, 0x0192, 0x0195, 0x03db, 0x026d, 0x026a, 0x01a3,
                 0x0336, 0x0264, 0x00e7, 0x02e2, 0x01e7, 0x03d2, 0x0213, 0x0212, 0x01ca, 0x03f3, 0x00e6, 0x0290, 0x0116,
                 0x00b9, 0x0293, 0x0384, 0x0279, 0x0001]
        p.coeff = coeff.copy()
        p.deg = deg

    if deg == 228:
        coeff = [0x031a, 0x0014, 0x0192, 0x02b9, 0x03b8, 0x0301, 0x0343, 0x0135, 0x000a, 0x0004, 0x00a8, 0x0063, 0x0107,
                 0x013c, 0x03f9, 0x039f, 0x0023, 0x03af, 0x03e4, 0x026d, 0x022e, 0x03fd, 0x030b, 0x0044, 0x0231, 0x0001,
                 0x0085, 0x0213, 0x038f, 0x02d1, 0x02f7, 0x01fc, 0x03d4, 0x0059, 0x0119, 0x0098, 0x01ef, 0x0100, 0x0014,
                 0x00c3, 0x00ae, 0x001f, 0x01ed, 0x0359, 0x0298, 0x03bf, 0x00a6, 0x00be, 0x01f2, 0x0080, 0x00f4, 0x02e8,
                 0x038d, 0x005b, 0x005a, 0x02a7, 0x00dc, 0x013c, 0x0138, 0x039b, 0x007f, 0x0397, 0x0375, 0x0181, 0x0270,
                 0x00fa, 0x006e, 0x0257, 0x03c9, 0x01e7, 0x01da, 0x0199, 0x01f3, 0x02cc, 0x030d, 0x01c8, 0x0230, 0x0105,
                 0x0396, 0x0032, 0x02b8, 0x03c3, 0x01e5, 0x028c, 0x0027, 0x019c, 0x028b, 0x0386, 0x0247, 0x0075, 0x0004,
                 0x017d, 0x0396, 0x01b8, 0x004e, 0x0133, 0x0340, 0x013f, 0x01cb, 0x017d, 0x01f1, 0x01ea, 0x02df, 0x037a,
                 0x03e2, 0x013d, 0x0277, 0x009a, 0x0352, 0x03c0, 0x038d, 0x030a, 0x00a8, 0x01e8, 0x0334, 0x004b, 0x0301,
                 0x01df, 0x0191, 0x031d, 0x029d, 0x007d, 0x0332, 0x00cd, 0x00ff, 0x0102, 0x0159, 0x01a7, 0x01a1, 0x0085,
                 0x0053, 0x024e, 0x0239, 0x03b6, 0x0126, 0x0287, 0x00b3, 0x039e, 0x02d4, 0x038d, 0x007c, 0x03bb, 0x00a2,
                 0x023e, 0x010c, 0x0337, 0x01a6, 0x00a3, 0x0165, 0x00b1, 0x02ae, 0x0173, 0x0281, 0x0190, 0x0313, 0x02f6,
                 0x01d5, 0x0112, 0x02bb, 0x0173, 0x033b, 0x0247, 0x02d6, 0x0116, 0x02ca, 0x019a, 0x016f, 0x00db, 0x00b9,
                 0x03e5, 0x000e, 0x0260, 0x00f6, 0x0103, 0x0363, 0x0202, 0x0020, 0x02d8, 0x02f3, 0x02b2, 0x025c, 0x02f8,
                 0x035a, 0x0210, 0x00c2, 0x03d5, 0x00cd, 0x001b, 0x0160, 0x0220, 0x03b1, 0x014e, 0x0345, 0x015a, 0x0088,
                 0x0052, 0x010d, 0x0311, 0x0066, 0x028e, 0x00a8, 0x01d9, 0x00c7, 0x000c, 0x0242, 0x0307, 0x0237, 0x0128,
                 0x0137, 0x0198, 0x01d2, 0x00b2, 0x0284, 0x0045, 0x008c, 0x03f2, 0x01a2, 0x023d, 0x03a3, 0x0246, 0x0384,
                 0x03bf, 0x006a, 0x0032, 0x00ca, 0x013c, 0x00f2, 0x02fa, 0x0001]
        p.coeff = coeff.copy()
        p.deg = deg

    if deg == 236:
        coeff = [0x02cb, 0x008f, 0x02c9, 0x0195, 0x0108, 0x0192, 0x01ed, 0x01a8, 0x02fc, 0x00a0, 0x03d3, 0x029c, 0x0383,
                 0x01e9, 0x03bd, 0x0171, 0x019f, 0x00c9, 0x00df, 0x03a3, 0x023c, 0x0089, 0x03b9, 0x0190, 0x0373, 0x0228,
                 0x0283, 0x0246, 0x0058, 0x03a4, 0x005b, 0x01c6, 0x0129, 0x026b, 0x003f, 0x00e3, 0x005f, 0x0010, 0x0340,
                 0x025e, 0x0108, 0x024b, 0x03dc, 0x0329, 0x0131, 0x033e, 0x00d7, 0x01c1, 0x02bb, 0x03b9, 0x0373, 0x03d0,
                 0x0159, 0x036d, 0x0148, 0x0366, 0x0287, 0x039a, 0x0356, 0x023b, 0x010d, 0x0173, 0x0307, 0x0122, 0x01d9,
                 0x02ac, 0x031d, 0x014a, 0x01a4, 0x012f, 0x0350, 0x0122, 0x00f1, 0x027b, 0x02f2, 0x0110, 0x0323, 0x0205,
                 0x01ec, 0x00d1, 0x0174, 0x018a, 0x00ed, 0x0054, 0x01f3, 0x00ae, 0x0016, 0x03c9, 0x00e4, 0x0190, 0x0342,
                 0x0318, 0x02ad, 0x0055, 0x0241, 0x01c8, 0x01a2, 0x016b, 0x0276, 0x02fa, 0x0134, 0x028a, 0x01f2, 0x0101,
                 0x03cf, 0x00bd, 0x0329, 0x03d9, 0x0151, 0x03b8, 0x011d, 0x02a6, 0x03d1, 0x014f, 0x00d9, 0x0194, 0x0113,
                 0x0162, 0x0336, 0x009e, 0x0145, 0x023b, 0x035c, 0x0268, 0x037b, 0x0299, 0x0016, 0x0028, 0x004e, 0x02d4,
                 0x02b7, 0x0107, 0x0004, 0x008e, 0x0310, 0x0389, 0x0365, 0x0159, 0x0071, 0x01c7, 0x0038, 0x00f8, 0x0332,
                 0x0061, 0x036e, 0x0189, 0x02d5, 0x0124, 0x0358, 0x010e, 0x00dd, 0x03fe, 0x03b9, 0x017e, 0x024c, 0x0188,
                 0x01e2, 0x0102, 0x0201, 0x0235, 0x02a8, 0x038c, 0x00ef, 0x00ac, 0x014f, 0x035a, 0x0050, 0x01a8, 0x00f9,
                 0x0382, 0x02de, 0x0029, 0x015d, 0x0062, 0x009e, 0x0135, 0x011b, 0x0031, 0x02fe, 0x021f, 0x0042, 0x03a4,
                 0x00b8, 0x0092, 0x01a9, 0x03b7, 0x02df, 0x0142, 0x0283, 0x02a5, 0x033b, 0x003e, 0x02d4, 0x036c, 0x03df,
                 0x01d6, 0x033f, 0x0189, 0x0006, 0x03b8, 0x02f8, 0x031d, 0x0359, 0x018b, 0x02ff, 0x0097, 0x0054, 0x017d,
                 0x009c, 0x0296, 0x01c7, 0x0336, 0x02f9, 0x0224, 0x022b, 0x00d2, 0x0288, 0x0242, 0x01a8, 0x0231, 0x039e,
                 0x004b, 0x018e, 0x023d, 0x02e1, 0x032a, 0x0272, 0x0135, 0x02ca, 0x00f1, 0x007e, 0x0019, 0x0265, 0x0275,
                 0x0368, 0x02b9, 0x0001]
        p.coeff = coeff.copy()
        p.deg = deg

    if deg == 460:
        coeff = [0x072e, 0x01fe, 0x03ca, 0x0784, 0x0588, 0x05e0, 0x0214, 0x02d7, 0x04c6, 0x07d2, 0x0373, 0x043d, 0x079d,
                 0x006e, 0x0705, 0x034e, 0x0504, 0x0682, 0x0563, 0x04d5, 0x059e, 0x0265, 0x0397, 0x069d, 0x07f8, 0x00c8,
                 0x06c1, 0x0650, 0x031f, 0x061b, 0x0452, 0x078a, 0x0345, 0x056b, 0x0624, 0x0675, 0x05e5, 0x0547, 0x02e0,
                 0x0645, 0x01d9, 0x0298, 0x0260, 0x066b, 0x022b, 0x0557, 0x05f3, 0x049a, 0x05a4, 0x0355, 0x01b6, 0x0438,
                 0x01c4, 0x04f5, 0x0732, 0x07f9, 0x0443, 0x022a, 0x067f, 0x0307, 0x057d, 0x030c, 0x05ed, 0x0160, 0x0539,
                 0x06df, 0x06a9, 0x0727, 0x0562, 0x04cf, 0x034b, 0x0463, 0x058f, 0x05f3, 0x009c, 0x063d, 0x039f, 0x04bc,
                 0x050c, 0x0086, 0x07d5, 0x03f3, 0x0528, 0x05ac, 0x0352, 0x0652, 0x0176, 0x04fc, 0x0125, 0x028d, 0x069f,
                 0x0126, 0x038a, 0x0689, 0x067e, 0x07c5, 0x0508, 0x071d, 0x005c, 0x0743, 0x031e, 0x03f0, 0x0094, 0x0594,
                 0x0365, 0x07b8, 0x0412, 0x06f6, 0x0155, 0x0175, 0x072f, 0x078b, 0x02e9, 0x00ea, 0x03ce, 0x0210, 0x0640,
                 0x063b, 0x038d, 0x071c, 0x05f2, 0x034f, 0x0193, 0x008c, 0x002e, 0x012a, 0x0510, 0x07ce, 0x0327, 0x003c,
                 0x0274, 0x0136, 0x0127, 0x05e4, 0x0334, 0x0361, 0x0673, 0x03b4, 0x0315, 0x01d7, 0x0705, 0x0123, 0x073a,
                 0x0088, 0x00b4, 0x0528, 0x0295, 0x0106, 0x03cf, 0x0471, 0x0361, 0x04dd, 0x0280, 0x0335, 0x0246, 0x06ec,
                 0x062b, 0x01db, 0x03b6, 0x0479, 0x065f, 0x04d6, 0x01e9, 0x0606, 0x0723, 0x0432, 0x00ee, 0x0598, 0x0464,
                 0x02cd, 0x0220, 0x03e9, 0x0163, 0x0345, 0x06bb, 0x02a7, 0x06e6, 0x02a4, 0x004e, 0x02e9, 0x069f, 0x054f,
                 0x00d6, 0x0737, 0x029d, 0x0462, 0x06e6, 0x0542, 0x06e6, 0x062a, 0x0594, 0x0291, 0x04c9, 0x015d, 0x00b7,
                 0x00b1, 0x044c, 0x01ea, 0x026a, 0x02d7, 0x0216, 0x0575, 0x003b, 0x02f8, 0x0531, 0x0126, 0x0095, 0x037d,
                 0x05e3, 0x0013, 0x0624, 0x05cb, 0x031d, 0x002d, 0x04ad, 0x0193, 0x0079, 0x0654, 0x03ba, 0x045d, 0x0789,
                 0x056c, 0x032f, 0x0334, 0x0529, 0x00d0, 0x018f, 0x02f5, 0x05ab, 0x02a4, 0x07b6, 0x0643, 0x06a7, 0x0616,
                 0x07f2, 0x0372, 0x04ef, 0x0374, 0x07fc, 0x04ff, 0x029d, 0x0682, 0x038f, 0x0575, 0x05e8, 0x0139, 0x0149,
                 0x02cc, 0x073d, 0x072e, 0x0441, 0x035f, 0x05d1, 0x0329, 0x01ae, 0x010c, 0x026e, 0x0215, 0x0014, 0x0325,
                 0x043c, 0x0431, 0x03d0, 0x002d, 0x070b, 0x04b3, 0x04a4, 0x06ac, 0x0114, 0x0240, 0x002e, 0x044e, 0x01f4,
                 0x01d8, 0x026a, 0x00ee, 0x05a7, 0x0001, 0x01c4, 0x03f5, 0x0448, 0x02fe, 0x07f7, 0x012a, 0x0137, 0x0618,
                 0x0036, 0x023d, 0x004b, 0x02fe, 0x0783, 0x054d, 0x0131, 0x0665, 0x0341, 0x0386, 0x0395, 0x0206, 0x0310,
                 0x02b3, 0x03bd, 0x05e2, 0x0625, 0x01cf, 0x01a6, 0x0717, 0x0085, 0x04e7, 0x00d2, 0x0723, 0x071f, 0x0458,
                 0x000f, 0x0354, 0x03b8, 0x0301, 0x0528, 0x04e3, 0x07e2, 0x0429, 0x0227, 0x043b, 0x0314, 0x0371, 0x057c,
                 0x024c, 0x03bb, 0x0739, 0x0513, 0x0722, 0x0579, 0x0741, 0x0141, 0x01b5, 0x0472, 0x05cb, 0x0777, 0x022b,
                 0x0603, 0x073c, 0x01d3, 0x01f6, 0x0116, 0x0134, 0x0295, 0x071b, 0x01f9, 0x0199, 0x0263, 0x034a, 0x0515,
                 0x07b6, 0x02fd, 0x0679, 0x0411, 0x043d, 0x0430, 0x0601, 0x04a6, 0x02bb, 0x0168, 0x0582, 0x016b, 0x031d,
                 0x0108, 0x046a, 0x0468, 0x0399, 0x0209, 0x05bc, 0x03eb, 0x0130, 0x0325, 0x00d4, 0x0330, 0x0356, 0x0320,
                 0x045c, 0x067f, 0x0179, 0x0449, 0x015f, 0x05ab, 0x07a3, 0x0784, 0x05b6, 0x02fc, 0x01f6, 0x0070, 0x01fb,
                 0x02e9, 0x007e, 0x0099, 0x04e3, 0x0184, 0x026e, 0x0629, 0x02b5, 0x0399, 0x013a, 0x0341, 0x02da, 0x0316,
                 0x0641, 0x07cb, 0x01a5, 0x042b, 0x03c0, 0x046e, 0x05c0, 0x000e, 0x02c6, 0x0603, 0x0793, 0x0098, 0x0019,
                 0x0494, 0x0250, 0x076b, 0x056b, 0x00a4, 0x00aa, 0x0477, 0x05c4, 0x00dc, 0x051b, 0x07b5, 0x002d, 0x01be,
                 0x065f, 0x0004, 0x014d, 0x01af, 0x067f, 0x00c7, 0x03c3, 0x0791, 0x0302, 0x0662, 0x026d, 0x01eb, 0x005d,
                 0x0643, 0x04c2, 0x0410, 0x0756, 0x0210, 0x069c, 0x0734, 0x04dc, 0x05fa, 0x03b5, 0x04f8, 0x02e9, 0x0172,
                 0x05d1, 0x0658, 0x074a, 0x07d2, 0x03b5, 0x0001]
        p.coeff = coeff.copy()
        p.deg = deg

    if deg == 560:
        coeff = [0x0036, 0x0789, 0x03ff, 0x07bb, 0x0542, 0x073a, 0x05f0, 0x011f, 0x07de, 0x0152, 0x07f1, 0x0411, 0x0436,
                 0x0140, 0x0128, 0x022a, 0x035c, 0x023f, 0x034f, 0x06c0, 0x0232, 0x00cc, 0x0373, 0x04d7, 0x01fa, 0x07dc,
                 0x06ad, 0x04f1, 0x0266, 0x0714, 0x01cb, 0x0108, 0x005d, 0x0599, 0x01d0, 0x0374, 0x02bd, 0x0689, 0x02d6,
                 0x00f3, 0x0537, 0x0044, 0x04ec, 0x04ea, 0x0023, 0x0483, 0x028b, 0x0059, 0x0049, 0x06d8, 0x0136, 0x04af,
                 0x010e, 0x0404, 0x0580, 0x026b, 0x075a, 0x0252, 0x047b, 0x070b, 0x020e, 0x0172, 0x0106, 0x0653, 0x0044,
                 0x00bc, 0x056e, 0x05d5, 0x028a, 0x001d, 0x0534, 0x060e, 0x064d, 0x07fe, 0x06b0, 0x0393, 0x01c7, 0x04bb,
                 0x06d5, 0x030e, 0x0253, 0x00aa, 0x06ae, 0x023f, 0x0134, 0x05a7, 0x0536, 0x043a, 0x00c2, 0x0537, 0x0024,
                 0x01c8, 0x0524, 0x025a, 0x0236, 0x030f, 0x0128, 0x0292, 0x04c1, 0x022b, 0x01ca, 0x011f, 0x031d, 0x0061,
                 0x0499, 0x03af, 0x069d, 0x0571, 0x00d6, 0x043a, 0x0283, 0x035a, 0x02d5, 0x07b8, 0x05b0, 0x05f6, 0x04f3,
                 0x0664, 0x05cd, 0x0715, 0x030b, 0x0755, 0x0032, 0x03bc, 0x077d, 0x072b, 0x0414, 0x05c2, 0x06ee, 0x0464,
                 0x04ff, 0x0600, 0x026d, 0x0350, 0x05d0, 0x0080, 0x05cb, 0x0234, 0x0018, 0x06bf, 0x06b7, 0x02b7, 0x044a,
                 0x0127, 0x05e0, 0x0635, 0x067f, 0x04bb, 0x03c2, 0x0498, 0x04f3, 0x056f, 0x0229, 0x0423, 0x05b4, 0x0782,
                 0x06d4, 0x0142, 0x05b2, 0x0157, 0x0714, 0x015b, 0x0073, 0x02c4, 0x0644, 0x06fe, 0x03ba, 0x0252, 0x04a1,
                 0x02f6, 0x002c, 0x0749, 0x05a0, 0x021a, 0x0107, 0x0701, 0x04c0, 0x03ba, 0x0772, 0x07b8, 0x04e0, 0x07d8,
                 0x0707, 0x0610, 0x0681, 0x0682, 0x0788, 0x0577, 0x0435, 0x055b, 0x030a, 0x0419, 0x0598, 0x0637, 0x0627,
                 0x018d, 0x033b, 0x0753, 0x06f7, 0x070f, 0x024a, 0x07bc, 0x02ce, 0x005e, 0x066a, 0x051d, 0x0670, 0x00c5,
                 0x05a2, 0x04dc, 0x0673, 0x07e6, 0x075c, 0x059e, 0x0001, 0x0749, 0x075d, 0x013d, 0x04ca, 0x06f0, 0x005a,
                 0x059f, 0x0017, 0x04fd, 0x0036, 0x05b1, 0x057d, 0x02fa, 0x0158, 0x0672, 0x0641, 0x06fe, 0x031f, 0x06cb,
                 0x003b, 0x06d7, 0x00da, 0x07ed, 0x07d3, 0x024a, 0x001c, 0x043f, 0x012d, 0x04dc, 0x0113, 0x009d, 0x07c1,
                 0x00b6, 0x0568, 0x03ce, 0x07e9, 0x0597, 0x075d, 0x05de, 0x03ba, 0x032a, 0x0285, 0x03a8, 0x04c8, 0x03ac,
                 0x0006, 0x0698, 0x0382, 0x0214, 0x0128, 0x03b4, 0x042d, 0x0027, 0x04f7, 0x0450, 0x0534, 0x010a, 0x0720,
                 0x01d5, 0x03ab, 0x07ee, 0x024b, 0x0792, 0x0189, 0x009f, 0x04fb, 0x0671, 0x07b4, 0x0587, 0x0008, 0x02cc,
                 0x0573, 0x0756, 0x0622, 0x047b, 0x0181, 0x033a, 0x035e, 0x07e6, 0x038f, 0x0404, 0x0429, 0x0355, 0x07c9,
                 0x03ed, 0x0202, 0x0594, 0x0279, 0x01e7, 0x04d4, 0x0449, 0x0506, 0x0148, 0x07d3, 0x07bf, 0x03df, 0x0284,
                 0x00dc, 0x01a3, 0x0407, 0x01ae, 0x0452, 0x04fd, 0x02d4, 0x00e0, 0x012d, 0x012c, 0x0513, 0x0508, 0x049a,
                 0x0134, 0x01b4, 0x07a7, 0x0529, 0x0389, 0x036a, 0x043b, 0x0799, 0x07bf, 0x004d, 0x0526, 0x035f, 0x0544,
                 0x00b6, 0x01f3, 0x0373, 0x0065, 0x02c3, 0x0017, 0x00f8, 0x03fa, 0x01d5, 0x002b, 0x0497, 0x0422, 0x0024,
                 0x06b3, 0x00e7, 0x05f2, 0x0182, 0x046c, 0x03e7, 0x036e, 0x067d, 0x012a, 0x06a5, 0x0053, 0x042b, 0x057a,
                 0x06cb, 0x022c, 0x0760, 0x0488, 0x05a1, 0x06f2, 0x0546, 0x01c0, 0x0628, 0x0798, 0x024d, 0x05a1, 0x0247,
                 0x062a, 0x046b, 0x0671, 0x04b1, 0x0197, 0x0433, 0x02f5, 0x0083, 0x0263, 0x00e1, 0x04a3, 0x052b, 0x012d,
                 0x0325, 0x07de, 0x0539, 0x048c, 0x04d7, 0x03e2, 0x021d, 0x0598, 0x02f0, 0x025d, 0x06a2, 0x02b2, 0x029b,
                 0x0640, 0x023d, 0x03fb, 0x0168, 0x039a, 0x0183, 0x0580, 0x0681, 0x04e6, 0x0229, 0x07c7, 0x01a5, 0x036c,
                 0x0464, 0x044e, 0x07f9, 0x01ca, 0x0120, 0x01f1, 0x051d, 0x0605, 0x04d5, 0x0473, 0x05da, 0x007d, 0x073d,
                 0x0755, 0x022a, 0x06fc, 0x03f9, 0x0002, 0x046c, 0x0372, 0x0035, 0x0607, 0x0390, 0x0691, 0x0090, 0x00dc,
                 0x0403, 0x03cd, 0x03b6, 0x03fe, 0x0359, 0x074f, 0x0110, 0x0296, 0x05d9, 0x031e, 0x02d5, 0x035f, 0x0369,
                 0x0771, 0x06b1, 0x0735, 0x0523, 0x03c1, 0x0133, 0x00ad, 0x0771, 0x04ce, 0x0284, 0x03a9, 0x050e, 0x07f5,
                 0x0185, 0x0203, 0x07bf, 0x0108, 0x0685, 0x04b6, 0x020e, 0x0300, 0x014d, 0x04ef, 0x0440, 0x014e, 0x05c3,
                 0x0228, 0x06ce, 0x07cb, 0x03ac, 0x00d3, 0x01b0, 0x07fd, 0x07a4, 0x0100, 0x00f3, 0x00cd, 0x0678, 0x052a,
                 0x00b6, 0x00fe, 0x004d, 0x0647, 0x028d, 0x03cc, 0x0625, 0x0648, 0x05a5, 0x0273, 0x040a, 0x01e6, 0x0001,
                 0x074b, 0x00b5, 0x0666, 0x008b, 0x04c3, 0x00e5, 0x02b9, 0x0274, 0x0720, 0x0771, 0x05c0, 0x03d1, 0x0780,
                 0x0074, 0x07c3, 0x062a, 0x0184, 0x044e, 0x02df, 0x0522, 0x02ed, 0x03e5, 0x0239, 0x03ee, 0x030d, 0x049c,
                 0x07d8, 0x077a, 0x03d4, 0x0428, 0x00ec, 0x0570, 0x04b0, 0x0458, 0x06ea, 0x075d, 0x01e0, 0x07e0, 0x0333,
                 0x0651, 0x0056, 0x0756, 0x04f2, 0x0206, 0x05ad, 0x05db, 0x016a, 0x00dd, 0x010d, 0x0551, 0x02e9, 0x03a9,
                 0x0527, 0x0001]
        p.coeff = coeff.copy()
        p.deg = deg
    return p
